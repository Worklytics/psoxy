package co.worklytics.psoxy.rules.github;

import co.worklytics.psoxy.rules.RESTRules;
import co.worklytics.psoxy.rules.Rules2;
import com.avaulta.gateway.rules.Endpoint;
import com.avaulta.gateway.rules.transforms.Transform;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Streams;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 *
 */
public class PrebuiltSanitizerRules {

    private static final List<String> commonAllowedQueryParameters = Lists.newArrayList(
            "per_page",
            "page"
    );

    private static final List<String> orgMembersAllowedQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("filter",
                            "role").stream())
            .collect(Collectors.toList());

    private static final List<String> repoCommitsAllowedQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("sha",
                            "path",
                            "since",
                            "until").stream())
            .collect(Collectors.toList());

    private static final List<String> issuesAllowedQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("milestone",
                            "state",
                            "labels",
                            "sort",
                            "direction",
                            "since").stream())
            .collect(Collectors.toList());

    private static final List<String> issueCommentsQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("since").stream())
            .collect(Collectors.toList());

    private static final List<String> repoListAllowedQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("type",
                            "sort",
                            "direction").stream())
            .collect(Collectors.toList());

    private static final List<String> projectServerAllowedQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("expand",
                                    "includeArchived")
                            .stream())
            .collect(Collectors.toList());

    private static final List<String> userServerAllowedQueryParameters = Streams.concat(commonAllowedQueryParameters.stream(),
                    Lists.newArrayList("username",
                                    "includeActive",
                                    "includeInactive")
                            .stream())
            .collect(Collectors.toList());

    private static final List<Transform> USER_TRANSFORMATIONS =Arrays.asList(
            Transform.Redact.builder()
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build(),
            Transform.Pseudonymize.builder()
                    .jsonPath("$..login")
                    .jsonPath("$..id")
                    .jsonPath("$..node_id")
                    .jsonPath("$..email")
                    .build()
    );

    static final Endpoint ORG_MEMBERS = Endpoint.builder()
            .pathTemplate("/orgs/{org}/members")
            .allowedQueryParams(orgMembersAllowedQueryParameters)
            .transforms(USER_TRANSFORMATIONS)
            .build();

    static final Endpoint GRAPHQL_FOR_USERS = Endpoint.builder()
            .pathTemplate("/graphql")
            .transform(Transform.Redact.builder()
                    .jsonPath("$.issues[*]..description")
                    .jsonPath("$.issues[*]..iconUrl")
                    .jsonPath("$.issues[*]..name")
                    .jsonPath("$.issues[*]..avatarUrls")
                    .jsonPath("$.issues[*].fields..self")
                    .jsonPath("$.issues[*]..displayName")
                    .jsonPath("$.issues[*]..comment")
                    .jsonPath("$..displayName")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..nameId")
                    .jsonPath("$..login")
                    .jsonPath("$..email")
                    .build())
            .build();

    static final Endpoint ORG_TEAMS = Endpoint.builder()
            .pathTemplate("/orgs/{org}/teams")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..name")
                    .jsonPath("$..url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..description")
                    .jsonPath("$..members_url")
                    .jsonPath("$..repositories_url")
                    .build())
            .build();

    static final Endpoint ORG_TEAM_MEMBERS = Endpoint.builder()
            .pathTemplate("/orgs/{org}/teams/{team_slug}/members")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transforms(USER_TRANSFORMATIONS)
            .build();

    static final Endpoint REPO_COMMITS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/commits")
            .allowedQueryParams(repoCommitsAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..name")
                    .jsonPath("$..url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..message")
                    .jsonPath("$..comments_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..email")
                    .build())
            .transforms(USER_TRANSFORMATIONS)
            .build();

    static final Endpoint REPO_COMMENTS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/commits")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..html_url")
                    .jsonPath("$..url")
                    .jsonPath("$..id")
                    .jsonPath("$..body")
                    .jsonPath("$..path")
                    .jsonPath("$..position")
                    .jsonPath("$..line")
                    .build())
            .transforms(USER_TRANSFORMATIONS)
            .build();

    static final Endpoint DEPLOYMENT = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/deployments")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..html_url")
                    .jsonPath("$..url")
                    .jsonPath("$..id")
                    .jsonPath("$..payload")
                    .jsonPath("$..statuses_url")
                    .jsonPath("$..repository_url")
                    .build())
            .transforms(USER_TRANSFORMATIONS)
            .build();

    static final Endpoint ISSUES = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/issues")
            .allowedQueryParams(issuesAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..url")
                    .jsonPath("$..repository_url")
                    .jsonPath("$..labels_url")
                    .jsonPath("$..comments_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..title")
                    .jsonPath("$..body")
                    .jsonPath("$..description")
                    .jsonPath("$..name")
                    .jsonPath("$..diff_url")
                    .jsonPath("$..patch_url")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..(user|assignee|closed_by).login")
                    .jsonPath("$..(user|assignee|closed_by).id")
                    .jsonPath("$..(user|assignee|closed_by).node_id")
                    .jsonPath("$..(user|assignee|closed_by).email")
                    .jsonPath("$..assignees[*].login")
                    .jsonPath("$..assignees[*].id")
                    .jsonPath("$..assignees[*].node_id")
                    .jsonPath("$..assignees[*].email")
                    .build())
            .build();

    static final Endpoint ISSUE = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/issues/{issue_number}")
            .allowedQueryParams(issuesAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..url")
                    .jsonPath("$..repository_url")
                    .jsonPath("$..labels_url")
                    .jsonPath("$..comments_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..title")
                    .jsonPath("$..body")
                    .jsonPath("$..description")
                    .jsonPath("$..name")
                    .jsonPath("$..diff_url")
                    .jsonPath("$..patch_url")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..(user|assignee|closed_by).login")
                    .jsonPath("$..(user|assignee|closed_by).id")
                    .jsonPath("$..(user|assignee|closed_by).node_id")
                    .jsonPath("$..(user|assignee|closed_by).email")
                    .jsonPath("$..assignees[*].login")
                    .jsonPath("$..assignees[*].id")
                    .jsonPath("$..assignees[*].node_id")
                    .jsonPath("$..assignees[*].email")
                    .build())
            .build();

    static final Endpoint ISSUE_COMMENTS = Endpoint.builder()
            .pathTemplate("/ex/jira/{cloudId}/rest/api/3/issue/{issueId}")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..message")
                    .jsonPath("$..body")
                    .jsonPath("$..issue_url")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..(user|assignee|closed_by).login")
                    .jsonPath("$..(user|assignee|closed_by).id")
                    .jsonPath("$..(user|assignee|closed_by).node_id")
                    .jsonPath("$..(user|assignee|closed_by).email")
                    .jsonPath("$..assignees[*].login")
                    .jsonPath("$..assignees[*].id")
                    .jsonPath("$..assignees[*].node_id")
                    .jsonPath("$..assignees[*].email")
                    .build())
            .build();

    static final Endpoint ISSUE_EVENTS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/issues/{issue_number}/events")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..name")
                    .jsonPath("$..url")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .jsonPath("$..commit_id")
                    .jsonPath("$..commit_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..(user|assignee|closed_by).login")
                    .jsonPath("$..(user|assignee|closed_by).id")
                    .jsonPath("$..(user|assignee|closed_by).node_id")
                    .jsonPath("$..(user|assignee|closed_by).email")
                    .jsonPath("$..actor.login")
                    .jsonPath("$..actor.id")
                    .jsonPath("$..actor.node_id")
                    .jsonPath("$..actor.email")
                    .build())
            .build();

    static final Endpoint ISSUE_TIMELINE = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/issues/{issue_number}/timeline")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..name")
                    .jsonPath("$..url")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .jsonPath("$..commit_id")
                    .jsonPath("$..commit_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..(user|assignee|closed_by).login")
                    .jsonPath("$..(user|assignee|closed_by).id")
                    .jsonPath("$..(user|assignee|closed_by).node_id")
                    .jsonPath("$..(user|assignee|closed_by).email")
                    .jsonPath("$..actor.login")
                    .jsonPath("$..actor.id")
                    .jsonPath("$..actor.node_id")
                    .jsonPath("$..actor.email")
                    .build())
            .build();

    static final Endpoint PULL_COMMENTS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/pulls/comments")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..url")
                    .jsonPath("$..diff_hunk")
                    .jsonPath("$..path")
                    .jsonPath("$..diff_hunk")
                    .jsonPath("$..position")
                    .jsonPath("$..original_position")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .jsonPath("$..commit_url")
                    .jsonPath("$..body")
                    .jsonPath("$..html_url")
                    .jsonPath("$..pull_request_url")
                    .jsonPath("$.._links")
                    .jsonPath("$..start_line")
                    .jsonPath("$..original_start_line")
                    .jsonPath("$..line")
                    .jsonPath("$..original_line")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..user.login")
                    .jsonPath("$..user.id")
                    .jsonPath("$..user.node_id")
                    .jsonPath("$..user.email")
                    .build())
            .build();

    static final Endpoint PULL_REVIEWS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/pulls/{pull_number}/reviews")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..body")
                    .jsonPath("$..html_url")
                    .jsonPath("$..pull_request_url")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..user.login")
                    .jsonPath("$..user.id")
                    .jsonPath("$..user.node_id")
                    .jsonPath("$..user.email")
                    .build())
            .build();

    static final Endpoint RELEASES = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/releases")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..url")
                    .jsonPath("$..html_url")
                    .jsonPath("$..assets_url")
                    .jsonPath("$..upload_url")
                    .jsonPath("$..tarball_url")
                    .jsonPath("$..zipball_url")
                    .jsonPath("$..browser_download_url")
                    .jsonPath("$..name")
                    .jsonPath("$..label")
                    .jsonPath("$..body")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..author.login")
                    .jsonPath("$..author.id")
                    .jsonPath("$..author.node_id")
                    .jsonPath("$..author.email")
                    .jsonPath("$..assets[*].uploader.login")
                    .jsonPath("$..assets[*].uploader.id")
                    .jsonPath("$..assets[*].uploader.node_id")
                    .jsonPath("$..assets[*].uploader.email")
                    .build())
            .build();

    static final Endpoint REPOSITORIES = Endpoint.builder()
            .pathTemplate("/orgs/{org}/repos")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..html_url")
                    .jsonPath("$..description")
                    .jsonPath("$..url")
                    .jsonPath("$..archive_url")
                    .jsonPath("$..assignees_url")
                    .jsonPath("$..blobs_url")
                    .jsonPath("$..branches_url")
                    .jsonPath("$..collaborators_url")
                    .jsonPath("$..comments_url")
                    .jsonPath("$..commits_url")
                    .jsonPath("$..compare_url")
                    .jsonPath("$..contents_url")
                    .jsonPath("$..contributors_url")
                    .jsonPath("$..deployments_url")
                    .jsonPath("$..downloads_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..forks_url")
                    .jsonPath("$..git_commits_url")
                    .jsonPath("$..git_refs_url")
                    .jsonPath("$..git_tags_url")
                    .jsonPath("$..git_url")
                    .jsonPath("$..issue_comment_url")
                    .jsonPath("$..issue_events_url")
                    .jsonPath("$..issues_url")
                    .jsonPath("$..keys_url")
                    .jsonPath("$..labels_url")
                    .jsonPath("$..languages_url")
                    .jsonPath("$..merges_url")
                    .jsonPath("$..milestones_url")
                    .jsonPath("$..notifications_url")
                    .jsonPath("$..pulls_url")
                    .jsonPath("$..releases_url")
                    .jsonPath("$..ssh_url")
                    .jsonPath("$..stargazers_url")
                    .jsonPath("$..statuses_url")
                    .jsonPath("$..subscribers_url")
                    .jsonPath("$..subscription_url")
                    .jsonPath("$..tags_url")
                    .jsonPath("$..teams_url")
                    .jsonPath("$..trees_url")
                    .jsonPath("$..clone_url")
                    .jsonPath("$..mirror_url")
                    .jsonPath("$..hooks_url")
                    .jsonPath("$..svn_url")
                    .jsonPath("$..homepage")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..owner.login")
                    .jsonPath("$..owner.id")
                    .jsonPath("$..owner.node_id")
                    .jsonPath("$..owner.email")
                    .build())
            .build();

    static final Endpoint COMMIT_COMMENT_REACTIONS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/comments/{comment_id}/reactions")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..user.login")
                    .jsonPath("$..user.id")
                    .jsonPath("$..user.node_id")
                    .jsonPath("$..user.email")
                    .build())
            .build();

    static final Endpoint ISSUE_REACTIONS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/issues/{issue_number}/reactions")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..user.login")
                    .jsonPath("$..user.id")
                    .jsonPath("$..user.node_id")
                    .jsonPath("$..user.email")
                    .build())
            .build();

    static final Endpoint ISSUE_COMMENT_REACTIONS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..followers_url")
                    .jsonPath("$..following_url")
                    .jsonPath("$..gists_url")
                    .jsonPath("$..starred_url")
                    .jsonPath("$..subscriptions_url")
                    .jsonPath("$..organizations_url")
                    .jsonPath("$..repos_url")
                    .jsonPath("$..events_url")
                    .jsonPath("$..received_events_url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..user.login")
                    .jsonPath("$..user.id")
                    .jsonPath("$..user.node_id")
                    .jsonPath("$..user.email")
                    .build())
            .build();

    static final Endpoint REPO_EVENTS = Endpoint.builder()
            .pathTemplate("/repos/{owner}/{repo}/events")
            .allowedQueryParams(commonAllowedQueryParameters)
            .transform(Transform.Redact.builder()
                    .jsonPath("$..display_login")
                    .jsonPath("$..avatar_url")
                    .jsonPath("$..gravatar_id")
                    .jsonPath("$..html_url")
                    .jsonPath("$..name")
                    .jsonPath("$..url")
                    .build())
            .transform(Transform.Pseudonymize.builder()
                    .jsonPath("$..actor.login")
                    .jsonPath("$..actor.id")
                    .jsonPath("$..actor.node_id")
                    .jsonPath("$..email")
                    .build())
            .build();

    @VisibleForTesting
    static final RESTRules GITHUB = Rules2.builder()
            .endpoint(ORG_MEMBERS)
            .endpoint(GRAPHQL_FOR_USERS)
            .endpoint(ORG_TEAMS)
            .endpoint(ORG_TEAM_MEMBERS)
            .endpoint(REPO_COMMITS)
            .endpoint(ISSUE)
            .endpoint(ISSUES)
            .endpoint(ISSUE_COMMENTS)
            .endpoint(ISSUE_COMMENTS)
            .endpoint(ISSUE_EVENTS)
            .endpoint(ISSUE_TIMELINE)
            .endpoint(ISSUE_REACTIONS)
            .endpoint(ISSUE_COMMENT_REACTIONS)
            .endpoint(COMMIT_COMMENT_REACTIONS)
            .endpoint(REPO_EVENTS)
            .endpoint(PULL_COMMENTS)
            .endpoint(PULL_REVIEWS)
            .endpoint(REPOSITORIES)
            .endpoint(REPO_COMMENTS)
            .endpoint(RELEASES)
            .endpoint(DEPLOYMENT)
            .build();

    public static final Map<String, RESTRules> RULES_MAP =
            ImmutableMap.<String, RESTRules>builder()
                    .put("github", GITHUB)
                    .build();
}