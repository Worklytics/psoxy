<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>co.worklytics.psoxy</groupId>
        <artifactId>java</artifactId>
        <version>${revision}</version>
    </parent>

    <groupId>co.worklytics.psoxy</groupId>
    <artifactId>psoxy-core${artifactSuffix}</artifactId>
    <packaging>jar</packaging>
    <description>Code that's core to both Psoxy clients and implementations</description>

    <licenses>
        <license>
            <name>Worklytics Commercial License</name>
            <url>https://github.com/Worklytics/psoxy/blob/main/LICENSE.md</url>
            <distribution>repo</distribution>
        </license>
    </licenses>


    <properties>
        <!-- empty for java 11 builds -->
        <artifactSuffix></artifactSuffix>
    </properties>

    <!-- generates a jdk8 compatible jar -->
    <!-- mvn clean install -P java8 -->
    <profiles>
        <profile>
            <id>java8</id>
            <properties>
                <artifactSuffix>-jdk8</artifactSuffix>
                <dependency.mockito-junit-jupiter.version>4.11.0</dependency.mockito-junit-jupiter.version>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.1</version>
                        <configuration>
                            <source>8</source>
                            <target>8</target>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>distribution</id>
            <build>
                <plugins>

                    <!-- add license plugin -->
                    <!-- use mvn goal license:aggregate-third-party-report to get report on licenses about
                         dependencies, to facilitate eventual distribution of built JAR -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                        <version>2.5.0</version>
                        <executions>
                            <execution>
                                <id>download-dependency-licenses</id>
                                <goals><goal>download-licenses</goal></goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <licensesOutputDirectory>${project.build.directory}/generated-resources/licenses</licensesOutputDirectory>
                                    <cleanLicensesOutputDirectory>true</cleanLicensesOutputDirectory>
                                    <licenseMerges>${project.parent.basedir}/license-mapping.xml</licenseMerges>
                                    <includeTransitiveDependencies>true</includeTransitiveDependencies>
                                    <excludedScopes>test,provided</excludedScopes>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-third-party-license</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>add-third-party</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/generated-resources/licenses</outputDirectory>
                                    <thirdPartyFilename>THIRD-PARTY-LICENSE-LIST.txt</thirdPartyFilename>
                                    <licenseMerges>${project.parent.basedir}/license-mapping.xml</licenseMerges>
                                    <includeTransitiveDependencies>true</includeTransitiveDependencies>
                                    <excludedScopes>test,provided</excludedScopes>
                                    <failOnMissing>true</failOnMissing>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${dependency.lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.avaulta.gateway</groupId>
            <artifactId>gateway-core${artifactSuffix}</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${dependency.apache-commons-lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>${dependency.apache-commons-csv.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${dependency.commons-io.version}</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${dependency.guava.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.inject/javax.inject -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.dagger/dagger -->
        <dependency>
            <groupId>com.google.dagger</groupId>
            <artifactId>dagger</artifactId>
            <version>${dependency.dagger.version}</version>
        </dependency>
        <!-- used to transform JSON responses -->
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>${dependency.json-path.version}</version>
        </dependency>
        <!-- Jackson - JSON serialization/deserialization -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${dependency.jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${dependency.jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${dependency.jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
            <version>${dependency.jackson.version}</version>
        </dependency>

        <!-- Communications with source API endpoints, including transport + auth -->
        <!-- for familiarity sake, use Google HTTP / OAuth clients -->
        <dependency>
            <groupId>com.google.http-client</groupId>
            <artifactId>google-http-client</artifactId>
            <version>${dependency.google-http-client.version}</version>
        </dependency>
        <!-- https://github.com/googleapis/google-auth-library-java#google-auth-library-oauth2-http -->
        <dependency>
            <groupId>com.google.auth</groupId>
            <artifactId>google-auth-library-oauth2-http</artifactId>
            <version>${dependency.google-auth-library-oauth2-http.version}</version>
        </dependency>


        <!-- RFC 2822 validator -->
        <!-- see https://github.com/bbottema/email-rfc2822-validator -->
        <dependency>
            <groupId>com.github.bbottema</groupId>
            <artifactId>emailaddress-rfc2822</artifactId>
            <version>2.3.1</version>
        </dependency>
        <dependency> <!-- for email validation to work in lib above; used in RESTApiSanitizerImpl, PseudonymizerImpl as of June 2023 -->
            <groupId>com.sun.mail</groupId>
            <artifactId>jakarta.mail</artifactId> <!-- CDDL + GPLv2 with classpath exception license, so ideally would remove -->
            <version>[1.6.3,1.9.9)</version>
        </dependency>

        <!-- explicit direct dep on apache HTTP Client (psoxy-core has transitive dep on it) -->
        <dependency>
            <groupId>org.apache.httpcomponents.core5</groupId>
            <artifactId>httpcore5</artifactId>
            <version>${dependency.apache-httpcore.version}</version>
        </dependency>

        <!-- support Hashicorp Vault as a secret store-->
        <!-- see https://github.com/BetterCloud/vault-java-driver -->
        <dependency>
            <groupId>com.bettercloud</groupId>
            <artifactId>vault-java-driver</artifactId>
            <version>${dependency.bettercloud-vault-java-driver}</version>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${dependency.mockito-junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Jupiter API for writing tests -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Jupiter Engine for running tests -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path-assert</artifactId>
            <version>${dependency.json-path.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk18on</artifactId>
            <version>1.78.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk18on</artifactId>
            <version>1.78.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.19.0</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <!-- rerun failing tests twice more -->
                    <rerunFailingTestsCount>2</rerunFailingTestsCount>
                    <systemProperties>
                        <property>
                            <name>java.util.logging.config.file</name>
                            <value>test-execution-logging.properties</value>
                        </property>
                    </systemProperties>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>1.3.0</version>
                <configuration>
                </configuration>
                <executions>
                    <!-- enable flattening -->
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <!-- ensure proper cleanup -->
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
