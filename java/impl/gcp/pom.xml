<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>co.worklytics.psoxy.impl</groupId>
        <artifactId>impl</artifactId>
        <version>${revision}</version>
    </parent>

    <groupId>co.worklytics.psoxy</groupId>
    <artifactId>psoxy-gcp</artifactId>
    <version>${revision}</version>
    <packaging>jar</packaging>

    <properties>
        <gcpProjectId>psoxy-dev-erik</gcpProjectId>
        <sourceApi>gmail</sourceApi>
        <!-- serviceAccount that function will run as. For Google Workspace use cases, should be the
         one configured as OAuth Client and authorized for your instance. -->
        <serviceAccount>psoxy-gmail-dwd@psoxy-dev-erik.iam.gserviceaccount.com</serviceAccount>
        <google-libraries-bom.version>${dependency.google-cloud-bom.version}</google-libraries-bom.version>
    </properties>

    <repositories>
        <repository>
            <id>central</id>
            <name>Central Repository</name>
            <url>https://repo.maven.apache.org/maven2</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.google.cloud</groupId>
                <artifactId>libraries-bom</artifactId>
                <version>${dependency.google-cloud-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <dependencies>

        <dependency>
            <groupId>co.worklytics.psoxy</groupId>
            <artifactId>psoxy-core</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- framework stuff -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${dependency.lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.dagger</groupId>
            <artifactId>dagger</artifactId>
            <version>${dependency.dagger.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.dagger</groupId>
            <artifactId>dagger-compiler</artifactId>
            <version>${dependency.dagger.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${dependency.apache-commons-lang3.version}</version>
        </dependency>


        <!-- platform stuff (eg, GCP Cloud Function support) -->
        <dependency>
            <groupId>com.google.cloud.functions</groupId>
            <artifactId>functions-framework-api</artifactId>
            <!-- NOTE: does NOT appear to be available in the google-libraries-bom -->
            <!-- does not appear to have any dependencies on other Google libraries -->
            <version>1.1.0</version> <!-- June 2023 - https://mvnrepository.com/artifact/com.google.cloud.functions/functions-framework-api -->
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.google.cloud</groupId>
            <artifactId>google-cloud-storage</artifactId>
        </dependency>

        <dependency>
            <groupId>com.google.cloud</groupId>
            <artifactId>google-cloud-secretmanager</artifactId>
        </dependency>


        <!-- JUnit Jupiter API for writing tests -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Jupiter Engine for running tests -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${dependency.mockito-junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!--
                  Google Cloud Functions Framework Maven plugin

                  This plugin allows you to run Cloud Functions Java code
                  locally. Use the following terminal command to run a
                  given function locally:

                  mvn function:run -Drun.functionTarget=your.package.yourFunction

                  eg, mvn function:run -Drun.functionTarget=co.worklytics.psoxy.Route

                  NOTE: intellij deploy run config doesn't work the first time. you should run the
                  `gcloud functions deploy` cmd once interactively, and follow the prompt to confirm
                  that you wish to block unauthenticated connections
                -->
                <groupId>com.google.cloud.functions</groupId>
                <artifactId>function-maven-plugin</artifactId>
                <version>0.11.0</version> <!-- 2023-07 -->
                <configuration>
                    <functionTarget>co.worklytics.psoxy.Route</functionTarget>

                    <!-- many more configuration options supported by the 'deploy' goal, not local run -->
                    <!-- set up env vars from file; setting env vars via IntelliJ Run Config DOES work locally, but tedious -->
                    <envVarsFile>./configs/${sourceApi}.yaml</envVarsFile>
                    <projectId>${gcpProjectId}</projectId>
                    <name>psoxy-${sourceApi}</name>
                    <serviceAccount>${serviceAccount}</serviceAccount>
                    <allowUnauthenticated>false</allowUnauthenticated>
                    <!-- set memory to something above default (256mb)? hard to imagine it's needed -->
                    <timeout>500</timeout> <!-- max here is 540 -->
                    <!-- TODO: set secrets here, when they expose this option through maven pluging (currently beta) -->
                </configuration>
            </plugin>

            <!-- produces an 'uber' JAR, with all deps pkg'd -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.7.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>co.worklytics.psoxy.Route</mainClass>
                        </manifest>
                    </archive>
                    <descriptors>
                        <descriptor>../uber-jar.xml</descriptor>
                    </descriptors>
                    <appendAssemblyId>false</appendAssemblyId>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- bind to the packaging phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <!-- rerun failing tests twice more -->
                    <rerunFailingTestsCount>2</rerunFailingTestsCount>
                    <includes>
                        <!-- defaults: **/Test*.java, **/*Test.java, **/*TestCase.java -->
                        <include>**/*Tests.java</include>
                        <include>**/*Test.java</include>
                    </includes>
                    <systemProperties>
                        <property>
                            <name>java.util.logging.config.file</name>
                            <value>test-execution-logging.properties</value>
                        </property>
                    </systemProperties>
                </configuration>
            </plugin>

            <!-- builds deployment directory containing only 'uber' JAR for deployment as GCP cloud function -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals><goal>copy-resources</goal></goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/deployment</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}</directory>
                                    <includes>
                                        <include>${project.build.finalName}.jar</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>distribution</id>
            <build>
                <plugins>

                    <!-- add license plugin -->
                    <!-- use mvn goal license:aggregate-third-party-report to get report on licenses about
                         dependencies, to facilitate eventual distribution of built JAR -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                        <version>2.5.0</version>
                        <executions>
                            <execution>
                                <id>download-dependency-licenses</id>
                                <goals><goal>download-licenses</goal></goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <licensesOutputDirectory>${project.build.directory}/generated-resources/licenses</licensesOutputDirectory>
                                    <cleanLicensesOutputDirectory>true</cleanLicensesOutputDirectory>
                                    <licenseMerges>${project.parent.basedir}/license-mapping.xml</licenseMerges>
                                    <includeTransitiveDependencies>true</includeTransitiveDependencies>
                                    <excludedScopes>test,provided</excludedScopes>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-third-party-license</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>add-third-party</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/generated-resources/licenses</outputDirectory>
                                    <thirdPartyFilename>THIRD-PARTY-LICENSE-LIST.txt</thirdPartyFilename>
                                    <licenseMerges>${project.parent.basedir}/license-mapping.xml</licenseMerges>
                                    <includeTransitiveDependencies>true</includeTransitiveDependencies>
                                    <excludedScopes>test,provided</excludedScopes>
                                    <failOnMissing>true</failOnMissing>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
